{{ define "concord.db" }}
db {
  url="jdbc:postgresql://{{ .Db.server }}:{{ .Db.port }}/{{ .Db.database }}"
  appUsername = "{{ .Db.user }}"
  appPassword = ${DB_PASSWORD}
  inventoryUsername = "{{ .Db.user }}"
  inventoryPassword = ${DB_PASSWORD}

  maxPoolSize = 20 # NEW

  changeLogParameters {
    superuserAvailable = "{{ .Values.database.superuserAvailable }}"
    createExtensionAvailable = "{{ .Values.database.createExtensionAvailable }}"
    defaultAdminToken = ${ADMIN_TOKEN}
    defaultAgentToken = ${AGENT_TOKEN}
  }
}

secretStore {
  serverPassword = ${SERVER_PASSWORD_BASE64}
  secretStoreSalt = ${SECRET_STORE_SALT_BASE64}
  projectSecretSalt = ${PROJECT_SECRET_SALT_BASE64}
}
{{ end }}

concord-server {

  {{ if eq .Values.database.type "internal" }}
    {{ include "concord.db" (dict "Values" .Values "Db" .Values.database.internal) | indent 2 }}
  {{ else if eq .Values.database.type "external" }}
    {{ include "concord.db" (dict "Values" .Values "Db" .Values.database.external) | indent 2 }}
  {{ end }}

  server {
    secureCookies = {{ .Values.expose.tls.enabled }} # only for HTTPS
    sessionTimeout = "{{ .Values.server.sessionTimeout }}"
  }

  process {
    maxStateAge = "{{ .Values.server.maxStateAge }}" # NEW

    # enable cleanup of the process queue
    queueCleanup = {{ if (hasKey .Values.server "queueCleanup") }}{{ .Values.server.queueCleanup }}{{ else }}true{{ end }}

    # enable cleanup of the process state table
    stateCleanup = {{ if (hasKey .Values.server "stateCleanup") }}{{ .Values.server.queueCleanup }}{{ else }}true{{ end }}

    # enable cleanup of the process events table
    eventsCleanup = {{ if (hasKey .Values.server "eventsCleanup") }}{{ .Values.server.queueCleanup }}{{ else }}true{{ end }}

    # enable cleanup of process logs
    logsCleanup = {{ if (hasKey .Values.server "logsCleanup") }}{{ .Values.server.queueCleanup }}{{ else }}true{{ end }}

    # enable cleanup of process checkpoints
    checkpointCleanup = {{ if (hasKey .Values.server "checkpointCleanup") }}{{ .Values.server.queueCleanup }}{{ else }}true{{ end }}

    maxStalledAge = "{{ .Values.server.maxStalledAge }}"

    cleanupInterval = "{{ .Values.server.cleanupInterval | default '1 hour'}}"
  }

  audit {
    enabled = true # NEW
    maxLogAge = "{{ .Values.server.maxLogAge }}" # NEW
  }

  {{- if .Values.ldap.enabled }}
  # AD/LDAP authentication
  ldap {
    url = "{{ .Values.ldap.url }}"
    searchBase = "{{ .Values.ldap.searchBase }}"
    principalSearchFilter = "{{ .Values.ldap.principalSearchFilter }}"
    # This is used by the UI
    userSearchFilter = "{{ .Values.ldap.userSearchFilter }}"
    usernameProperty = "{{ .Values.ldap.usernameProperty }}"
    mailProperty = "{{ .Values.ldap.mailProperty }}"
    groupSearchFilter = "{{ .Values.ldap.groupSearchFilter }}"
    groupNameProperty = "{{ .Values.ldap.groupNameProperty }}"
    groupDisplayNameProperty = "{{ .Values.ldap.groupDisplayNameProperty }}"
    systemUsername = "{{ .Values.ldap.systemUsername }}"
    systemPassword = ${LDAP_SYSTEM_PASSWORD}
  }
  {{ end -}}

  {{- if .Values.oidc.enabled }}

  # OpenID Connect support
  oidc {
    enabled = true
    clientId = "{{ .Values.oidc.clientId }}"
    secret = "{{ .Values.oidc.secret }}"
    discoveryUri = "{{ .Values.oidc.discoveryUri }}"
    urlBase = "{{ .Values.oidc.urlBase }}"
    afterLoginUrl = "{{ .Values.oidc.afterLoginUrl }}"
    afterLogoutUrl = "{{ .Values.oidc.afterLogoutUrl }}"

    scopes = {{ toJson .Values.oidc.scopes }}

    {{- if .Values.oidc.teamMapping }}
    teamMapping = {
      {{- range $k, $v := .Values.oidc.teamMapping }}
        {{ $k | quote}} {
            source = {{toJson $v.source}}
            role = {{ $v.role | quote }}
        }
      {{- end }}
    }
    {{- end }}

    {{- if .Values.oidc.roleMapping }}
    roleMapping = {
      {{- range $k, $v := .Values.oidc.roleMapping }}
        {{ $k | quote}} {
            source = {{toJson $v.source}}
        }
      {{- end }}
    }
    {{ end -}}
  }
  {{ end -}}

  {{ if .Values.github.enabled }}
  github {
    secret = ${GITHUB_SECRET}
  }
  {{ end }}

  {{ if .Values.git }}{{ if .Values.git.oauth }}
  git {
    oauth = "{{ .Values.git.oauth }}"
  }
  {{ end }}{{ end }}

  mica {
      oidc {
        logoutEndpoint = "{{ .Values.oidc.authServer }}/login/signout"
      }
  }
}
